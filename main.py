import os
import threading
import http.server
import socketserver
import logging
import websocket
import requests

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# === Telegram ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

def send_telegram(msg: str):
    if not BOT_TOKEN or not CHAT_ID:
        logging.warning("‚ùå BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return
    try:
        requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json={"chat_id": CHAT_ID, "text": msg}
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# === HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway ===
PORT = int(os.getenv("PORT", 8080))

class HealthHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain; charset=utf-8")
        self.end_headers()
        self.wfile.write("‚úÖ Bot is running".encode("utf-8"))

    def log_message(self, format, *args):
        return  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏

def run_http_server():
    with socketserver.TCPServer(("0.0.0.0", PORT), HealthHandler) as httpd:
        logging.info(f"üåç HTTP —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {PORT}")
        send_telegram(f"üåç HTTP —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {PORT}")
        httpd.serve_forever()

# === WebSocket PumpPortal ===
def on_message(ws, message):
    logging.info(f"üì© –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    send_telegram(f"üì© {message}")

def on_open(ws):
    logging.info("üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
    send_telegram("üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ PumpPortal")

def start_websocket():
    ws = websocket.WebSocketApp(
        "wss://pumpportal.fun/api/data",
        on_message=on_message,
        on_open=on_open
    )
    ws.run_forever()

if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –õ–æ–≤–∏–º –º–µ–º–∫–æ–∏–Ω—ã Solana‚Ä¶")

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_http_server, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
    start_websocket()
