import os
import time
import logging
import requests
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone

# --------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ .env –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------
load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# --------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# --------------------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_IDS = [c.strip() for c in os.getenv("TELEGRAM_CHAT_ID", "").split(",") if c.strip()]

# –§–∏–ª—å—Ç—Ä—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–∑ .env)
MIN_LIQ_USD        = float(os.getenv("MIN_LIQ_USD", 500))
MIN_VOL_5M         = float(os.getenv("MIN_VOL_5M", 100))
MIN_BUYS_5M        = int(os.getenv("MIN_BUYS_5M", 5))
MIN_PCHANGE_5M     = float(os.getenv("MIN_PCHANGE_5M", 1))
QUOTE_PREF         = [x.strip().upper() for x in os.getenv("QUOTE_PREF", "SOL").split(",") if x.strip()]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã
POLL_SECONDS         = int(os.getenv("POLL_SECONDS", 60))
HEARTBEAT_HOURS      = float(os.getenv("HEARTBEAT_HOURS", 2))
SELL_DROP_PCT        = float(os.getenv("SELL_DROP_PCT", 7))           # SELL –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –æ—Ç –ø–∏–∫–∞
TRACK_TTL_HOURS      = float(os.getenv("TRACK_TTL_HOURS", 24))        # —Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–∂–∞—Ç—å –º–æ–Ω–µ—Ç—É –≤ —Ç—Ä–µ–∫–∏–Ω–≥–µ
REPEAT_ALERT_STEP_PCT= float(os.getenv("REPEAT_ALERT_STEP_PCT", 5))   # –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–ª–µ—Ä—Ç –ø—Ä–∏ —Ä–æ—Å—Ç–µ –µ—â—ë –Ω–∞ X% –æ—Ç –ø—Ä–æ—à–ª–æ–π —Ü–µ–Ω—ã-–∞–ª–µ—Ä—Ç–∞

TRACK_TTL_SEC        = int(TRACK_TTL_HOURS * 3600)

# Dexscreener
API_URL = "https://api.dexscreener.com/latest/dex/search?q=solana"

# --------------------------
# –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–∞–º—è—Ç—å
# --------------------------
# tracked[pair] = {
#   'symbol','name','address',
#   'first_seen': dt,
#   'first_alert_time': dt|None,
#   'last_alert_price': float|None,
#   'peak': float,
#   'last_price': float,
#   'sell_notified': bool
# }
tracked = {}
last_heartbeat = datetime.now(timezone.utc)

# --------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# --------------------------
def now_utc():
    return datetime.now(timezone.utc)

def fmt_usd(x: float) -> str:
    try:
        if x >= 1:
            return f"{x:,.2f}$"
        return f"{x:,.6f}$"
    except Exception:
        return f"{x}$"

def send_telegram(message: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_IDS:
        return
    for chat_id in TELEGRAM_CHAT_IDS:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": int(chat_id) if str(chat_id).lstrip("-").isdigit() else chat_id,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        try:
            r = requests.post(url, json=payload, timeout=10)
            if r.status_code != 200:
                logging.error("Telegram error %s: %s", chat_id, r.text)
        except Exception as e:
            logging.error("Telegram error %s: %s", chat_id, e)

def get_pairs():
    try:
        r = requests.get(API_URL, timeout=15)
        if r.status_code == 200:
            return r.json().get("pairs", []) or []
        logging.error("DexScreener API status: %s", r.status_code)
    except Exception as e:
        logging.error("DexScreener API error: %s", e)
    return []

def build_links(token: dict):
    pair_addr = token.get("pairAddress", "")
    base = token.get("baseToken", {}) or {}
    token_addr = base.get("address", "")
    dex_link = f"https://dexscreener.com/solana/{pair_addr}" if pair_addr else ""
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –≤ Phantom
    phantom_link = f"https://phantom.app/ul/browse/{token_addr}" if token_addr else ""
    return dex_link, phantom_link

def eligible_growth(token: dict) -> bool:
    """–§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–æ—Å—Ç—É –∏ –±–∞–∑–æ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º. –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º ‚Äî –∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª."""
    try:
        liq = float(token.get("liquidity", {}).get("usd") or 0)
        vol5 = float(token.get("volume", {}).get("m5") or 0)
        buys5 = int(token.get("txns", {}).get("m5", {}).get("buys") or 0)
        pchg5 = float(token.get("priceChange", {}).get("m5") or 0)
        quote = (token.get("quoteToken", {}) or {}).get("symbol", "").upper()
        return (
            pchg5 >= MIN_PCHANGE_5M
            and liq >= MIN_LIQ_USD
            and vol5 >= MIN_VOL_5M
            and buys5 >= MIN_BUYS_5M
            and (quote in QUOTE_PREF if QUOTE_PREF else True)
        )
    except Exception:
        return False

# --------------------------
# –õ–æ–≥–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
# --------------------------
def maybe_send_growth_alert(pid: str, t: dict) -> None:
    """–ü–µ—Ä–≤–∏—á–Ω—ã–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–ª–µ—Ä—Ç –Ω–∞ —Ä–æ—Å—Ç."""
    base = t.get("baseToken", {}) or {}
    name = base.get("name", "") or ""
    symb = base.get("symbol", "") or ""

    price = float(t.get("priceUsd") or 0)
    if price <= 0:
        return

    pchg5 = float(t.get("priceChange", {}).get("m5") or 0)
    liq = float(t.get("liquidity", {}).get("usd") or 0)
    vol5 = float(t.get("volume", {}).get("m5") or 0)
    buys5 = int(t.get("txns", {}).get("m5", {}).get("buys") or 0)
    dex_link, phantom_link = build_links(t)

    info = tracked.setdefault(pid, {
        "symbol": symb,
        "name": name,
        "address": base.get("address", ""),
        "first_seen": now_utc(),
        "first_alert_time": None,
        "last_alert_price": None,
        "peak": 0.0,
        "last_price": 0.0,
        "sell_notified": False,
    })

    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫/–ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
    info["last_price"] = price
    if price > info["peak"]:
        info["peak"] = price
        # –µ—Å–ª–∏ –ø–∏–∫ –æ–±–Ω–æ–≤–∏–ª—Å—è ‚Äî —Å–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º SELL-—Å–∏–≥–Ω–∞–ª –≤ –±—É–¥—É—â–µ–º
        # (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ –±—ã–ª sell_notified=True)
        # –Ω–æ –ª—É—á—à–µ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å ‚Äî –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å

    # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–ª–µ—Ä—Ç?
    if info["first_alert_time"] is None:
        msg = (
            "üöÄ <b>–†–æ—Å—Ç –Ω–∞ Solana</b>\n"
            f"üè∑ <b>{name} ({symb})</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{fmt_usd(price)}</b>\n"
            f"üìà –†–æ—Å—Ç (5–º): <b>{pchg5:.2f}%</b>\n"
            f"üíµ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: <b>{liq:,.0f}$</b>\n"
            f"üìä –û–±—ä—ë–º (5–º): <b>{vol5:,.0f}$</b>\n"
            f"üõí –ü–æ–∫—É–ø–æ–∫ (5–º): <b>{buys5}</b>\n"
            f"üîó <a href='{dex_link}'>Dexscreener</a>\n"
            f"üëõ <a href='{phantom_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ Phantom</a>"
        )
        send_telegram(msg)
        logging.info("Growth alert (first): %s (%s) +%.2f%%", name, pid, pchg5)
        info["first_alert_time"] = now_utc()
        info["last_alert_price"] = price
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–ª–µ—Ä—Ç? (—Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –µ—â—ë –Ω–∞ REPEAT_ALERT_STEP_PCT% –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã-–∞–ª–µ—Ä—Ç–∞)
    last_alert_price = info.get("last_alert_price") or price
    step_threshold_price = last_alert_price * (1 + REPEAT_ALERT_STEP_PCT / 100.0)
    if price >= step_threshold_price:
        gain_from_last = (price / last_alert_price - 1) * 100.0
        msg = (
            "üìà <b>–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–æ—Å—Ç</b>\n"
            f"üè∑ <b>{name} ({symb})</b>\n"
            f"‚¨ÜÔ∏è –° –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–æ—à–ª–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: <b>{gain_from_last:.2f}%</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{fmt_usd(price)}</b>\n"
            f"üîó <a href='{dex_link}'>Dexscreener</a>\n"
            f"üëõ <a href='{phantom_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ Phantom</a>"
        )
        send_telegram(msg)
        logging.info("Growth alert (repeat): %s (%s) +%.2f%% from last", name, pid, gain_from_last)
        info["last_alert_price"] = price  # —Å–¥–≤–∏–≥–∞–µ–º —Å—Ç—É–ø–µ–Ω—å–∫—É

def maybe_send_sell_alert(pid: str) -> None:
    """SELL-—Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –æ—Ç –ø–∏–∫–∞ >= SELL_DROP_PCT%."""
    info = tracked.get(pid)
    if not info or info["sell_notified"]:
        return
    peak = info.get("peak", 0.0) or 0.0
    last = info.get("last_price", 0.0) or 0.0
    if peak <= 0 or last <= 0:
        return
    drop_pct = (1 - last / peak) * 100.0
    if drop_pct >= SELL_DROP_PCT:
        # —Å—Å—ã–ª–∫–∏
        dex_link = f"https://dexscreener.com/solana/{pid}"
        phantom_link = f"https://phantom.app/ul/browse/{info.get('address','')}"
        msg = (
            "‚ö†Ô∏è <b>SELL-—Å–∏–≥–Ω–∞–ª</b>\n"
            f"üè∑ <b>{info['name']} ({info['symbol']})</b>\n"
            f"üìâ –ü–∞–¥–µ–Ω–∏–µ –æ—Ç –ø–∏–∫–∞: <b>{drop_pct:.2f}%</b>\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{fmt_usd(last)}</b>\n"
            f"üîó <a href='{dex_link}'>Dexscreener</a>\n"
            f"üëõ <a href='{phantom_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ Phantom</a>"
        )
        send_telegram(msg)
        logging.info("SELL alert: %s (%s) drop=%.2f%%", info["name"], pid, drop_pct)
        info["sell_notified"] = True

# --------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# --------------------------
def main():
    global last_heartbeat

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")

    while True:
        started = time.monotonic()
        try:
            # —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Ç—Ä–µ–∫–∏ –ø–æ TTL
            cutoff = now_utc() - timedelta(seconds=TRACK_TTL_SEC)
            for pid, info in list(tracked.items()):
                if info["first_seen"] < cutoff:
                    tracked.pop(pid, None)

            pairs = get_pairs()
            if not pairs:
                logging.info("‚è≥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Dexscreener, –∂–¥—É...")
            found = 0

            # –∏–Ω–¥–µ–∫—Å –ø–æ pairAddress –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ SELL
            by_pair = {p.get("pairAddress"): p for p in pairs if p.get("pairAddress")}

            # –∞–ª–µ—Ä—Ç—ã –Ω–∞ —Ä–æ—Å—Ç
            for t in pairs:
                if not eligible_growth(t):
                    continue
                pid = t.get("pairAddress")
                if not pid:
                    continue
                # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
                maybe_send_growth_alert(pid, t)
                found += 1

            if found == 0:
                logging.info("‚è≥ –ñ–¥—É —Å–∏–≥–Ω–∞–ª—ã...")

            # SELL-–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Å–µ–º, –∫–æ–≥–æ —Ç—Ä–µ–∫–∞–µ–º
            for pid, info in list(tracked.items()):
                cur = by_pair.get(pid)
                if cur:
                    price = float(cur.get("priceUsd") or 0)
                    if price > 0:
                        info["last_price"] = price
                        if price > info.get("peak", 0.0):
                            info["peak"] = price
                maybe_send_sell_alert(pid)

            # Heartbeat
            if now_utc() - last_heartbeat >= timedelta(hours=HEARTBEAT_HOURS):
                send_telegram("‚úÖ –Ø —Ä–∞–±–æ—Ç–∞—é. –ú–æ–Ω–∏—Ç–æ—Ä—é –ø–∞—Ä—ã –Ω–∞ —Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ‚Ä¶")
                last_heartbeat = now_utc()

        except Exception as e:
            logging.error("‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: %s", e, exc_info=True)
            time.sleep(5)

        # —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        elapsed = time.monotonic() - started
        sleep_for = max(1.0, POLL_SECONDS - elapsed)
        time.sleep(sleep_for)

if __name__ == "__main__":
    main()
