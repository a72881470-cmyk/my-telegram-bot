import os
import time
import requests
import logging
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone

# --------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ .env –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------
load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# --------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# --------------------------
try:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
except Exception as e:
    print(TELEGRAM_BOT_TOKEN)
    print('e')
TELEGRAM_CHAT_IDS = [c.strip() for c in os.getenv("TELEGRAM_CHAT_ID", "").split(",") if c.strip()]

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env")
if not TELEGRAM_CHAT_IDS:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_CHAT_ID –≤ .env (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")

# –§–∏–ª—å—Ç—Ä—ã/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
MIN_LIQ_USD        = float(os.getenv("MIN_LIQ_USD", 5000))         # –º–∏–Ω. –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å $
MIN_VOL_5M         = float(os.getenv("MIN_VOL_5M", 3000))          # –º–∏–Ω. –æ–±—ä—ë–º –∑–∞ 5–º $
MIN_BUYS_5M        = int(os.getenv("MIN_BUYS_5M", 20))             # –º–∏–Ω. –ø–æ–∫—É–ø–æ–∫ –∑–∞ 5–º
MIN_PCHANGE_5M     = float(os.getenv("MIN_PCHANGE_5M", 5))         # –º–∏–Ω. —Ä–æ—Å—Ç –∑–∞ 5–º %
QUOTE_PREF         = [x.strip().upper() for x in os.getenv("QUOTE_PREF", "USDC,SOL").split(",")]
NEW_MAX_AGE_MIN    = int(os.getenv("NEW_MAX_AGE_MIN", 10))         # –º–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç ¬´–Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã¬ª, –º–∏–Ω
POLL_SECONDS       = int(os.getenv("POLL_SECONDS", 60))            # –ø–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞, —Å–µ–∫
HEARTBEAT_HOURS    = float(os.getenv("HEARTBEAT_HOURS", 2))        # —Ä–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–ª–∞—Ç—å ¬´—è —Ä–∞–±–æ—Ç–∞—é¬ª
SELL_DROP_PCT      = float(os.getenv("SELL_DROP_PCT", 7))          # –ø–∞–¥–µ–Ω–∏–µ –æ—Ç –ø–∏–∫–∞ –¥–ª—è SELL —Å–∏–≥–Ω–∞–ª–∞, %
TRACK_TTL_HOURS    = float(os.getenv("TRACK_TTL_HOURS", 24))       # —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–µ—Ä–∂–∞—Ç—å –º–æ–Ω–µ—Ç—É –≤ —Ç—Ä–µ–∫–∏–Ω–≥–µ

# DexScreener API (Solana)
API_URL = "https://api.dexscreener.com/latest/dex/search?q=solana"

# –ü–∞–º—è—Ç—å
seen_tokens = set()        # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å BUY
tracked = {}               # pairAddress -> { 'symbol','name','address','buy_price','peak','last','first_seen','sell_notified' }
last_status_time = datetime.now(timezone.utc)

# --------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# --------------------------
def fmt_usd(x: float) -> str:
    try:
        if x >= 1:
            return f"{x:,.2f}$"
        return f"{x:,.6f}$"
    except Exception:
        return f"{x}$"

def send_telegram(message: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã."""
    for chat_id in TELEGRAM_CHAT_IDS:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": message, "parse_mode": "HTML", "disable_web_page_preview": True}
        try:
            r = requests.post(url, json=payload, timeout=10)
            if r.status_code != 200:
                logging.error("TG error %s: %s", chat_id, r.text)
        except Exception as e:
            logging.error("TG error %s: %s", chat_id, e)

def get_pairs():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä—ã Solana –∏–∑ DexScreener."""
    try:
        r = requests.get(API_URL, timeout=15)
        if r.status_code == 200:
            return r.json().get("pairs", []) or []
        logging.error("DexScreener API status: %s", r.status_code)
    except Exception as e:
        logging.error("DexScreener API error: %s", e)
    return []

def eligible(token: dict) -> bool:
    """–§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º."""
    try:
        liq = float(token.get("liquidity", {}).get("usd") or 0)
        vol5 = float(token.get("volume", {}).get("m5") or 0)
        buys5 = int(token.get("txns", {}).get("m5", {}).get("buys") or 0)
        age_min = int(token.get("age") or 0)
        pchg5 = float(token.get("priceChange", {}).get("m5") or 0)
        quote = (token.get("quoteToken", {}) or {}).get("symbol", "").upper()

        return (
            age_min <= NEW_MAX_AGE_MIN
            and liq >= MIN_LIQ_USD
            and vol5 >= MIN_VOL_5M
            and buys5 >= MIN_BUYS_5M
            and pchg5 >= MIN_PCHANGE_5M
            and (quote in QUOTE_PREF)
        )
    except Exception:
        return False

def build_links(token: dict):
    """–°—Å—ã–ª–∫–∏ DexScreener + Phantom."""
    pair_addr = token.get("pairAddress", "")
    base = token.get("baseToken", {}) or {}
    token_addr = base.get("address", "")

    dex_link = f"https://dexscreener.com/solana/{pair_addr}" if pair_addr else ""
    phantom_link = f"https://phantom.app/ul/browse/{token_addr}" if token_addr else ""
    return dex_link, phantom_link

def now_utc():
    return datetime.now(timezone.utc)

# --------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# --------------------------
def main():
    global last_status_time

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    send_telegram("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ñ–¥—É –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –ø–æ Solana‚Ä¶")

    while True:
        start_ts = time.monotonic()
        pairs = get_pairs()

        # BUY-—Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç
        for t in pairs:
            if not eligible(t):
                continue

            pair_id = t.get("pairAddress")
            if not pair_id or pair_id in seen_tokens:
                continue

            seen_tokens.add(pair_id)

            base = t.get("baseToken", {}) or {}
            name = base.get("name", "") or ""
            symb = base.get("symbol", "") or ""
            token_addr = base.get("address", "") or ""

            price = float(t.get("priceUsd") or 0)
            pchg5 = float(t.get("priceChange", {}).get("m5") or 0)
            liq = float(t.get("liquidity", {}).get("usd") or 0)
            vol5 = float(t.get("volume", {}).get("m5") or 0)
            buys5 = int(t.get("txns", {}).get("m5", {}).get("buys") or 0)

            dex_link, phantom_link = build_links(t)

            msg = (
                "üöÄ <b>–ù–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞ (BUY-—Å–∏–≥–Ω–∞–ª)</b>\n"
                f"üè∑ <b>{name} ({symb})</b>\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{fmt_usd(price)}</b>\n"
                f"üìà –†–æ—Å—Ç (5–º): <b>{pchg5:.2f}%</b>\n"
                f"üíµ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: <b>{liq:,.0f}$</b>\n"
                f"üìä –û–±—ä—ë–º (5–º): <b>{vol5:,.0f}$</b>\n"
                f"üõí –ü–æ–∫—É–ø–æ–∫ (5–º): <b>{buys5}</b>\n"
                f"üîó <a href='{dex_link}'>DexScreener</a>\n"
                f"üëõ <a href='{phantom_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ Phantom</a>"
            )
            send_telegram(msg)
            logging.info("BUY signal: %s (%s)", name, pair_id)

            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–µ–∫–∏–Ω–≥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ SELL
            tracked[pair_id] = {
                "symbol": symb,
                "name": name,
                "address": token_addr,
                "buy_price": price,
                "peak": price if price > 0 else 0,
                "last": price,
                "first_seen": now_utc(),
                "sell_notified": False,
            }

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∏ SELL-—Å–∏–≥–Ω–∞–ª—ã
        # —Å–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –ø–æ –ø–∞—Ä–∞–º, —á—Ç–æ–±—ã –Ω–µ –∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º—É —Å–ø–∏—Å–∫—É
        by_pair = {p.get("pairAddress"): p for p in pairs if p.get("pairAddress")}

        to_delete = []
        for pid, info in tracked.items():
            # TTL –æ—á–∏—Å—Ç–∫–∞
            if now_utc() - info["first_seen"] > timedelta(hours=TRACK_TTL_HOURS):
                to_delete.append(pid)
                continue

            cur = by_pair.get(pid)
            if not cur:
                # –ø–∞—Ä—ã –Ω–µ—Ç –≤ –≤—ã–¥–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º, –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è —Å–Ω–æ–≤–∞
                continue

            price = float(cur.get("priceUsd") or 0)
            if price <= 0:
                continue

            # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫
            if price > info["peak"]:
                info["peak"] = price

            info["last"] = price

            # —É—Å–ª–æ–≤–∏–µ SELL: –ø–∞–¥–µ–Ω–∏–µ –æ—Ç –ø–∏–∫–∞ –Ω–∞ SELL_DROP_PCT%
            if not info["sell_notified"] and info["peak"] > 0:
                drop_pct = (1 - price / info["peak"]) * 100
                if drop_pct >= SELL_DROP_PCT:
                    dex_link, phantom_link = build_links(cur)
                    msg = (
                        "‚ö†Ô∏è <b>SELL-—Å–∏–≥–Ω–∞–ª</b>\n"
                        f"üè∑ <b>{info['name']} ({info['symbol']})</b>\n"
                        f"üìâ –¢–µ–∫—É—â–µ–µ –ø–∞–¥–µ–Ω–∏–µ –æ—Ç –ø–∏–∫–∞: <b>{drop_pct:.2f}%</b>\n"
                        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{fmt_usd(price)}</b>\n"
                        f"üîó <a href='{dex_link}'>DexScreener</a>\n"
                        f"üëõ <a href='{phantom_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ Phantom</a>"
                    )
                    send_telegram(msg)
                    info["sell_notified"] = True
                    logging.info("SELL signal: %s (%s) drop=%.2f%%", info["name"], pid, drop_pct)

        # –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö
        for pid in to_delete:
            tracked.pop(pid, None)

        # heartbeat —Ä–∞–∑ –≤ HEARTBEAT_HOURS
        if now_utc() - last_status_time >= timedelta(hours=HEARTBEAT_HOURS):
            send_telegram("‚úÖ –Ø —Ä–∞–±–æ—Ç–∞—é. –ú–æ–Ω–∏—Ç–æ—Ä—é –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∏ —Ü–µ–Ω—ã‚Ä¶")
            last_status_time = now_utc()

        # —Å–ø–∏–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        elapsed = time.monotonic() - start_ts
        sleep_for = max(1.0, POLL_SECONDS - elapsed)
        time.sleep(sleep_for)


if __name__ == "__main__":
    main()

