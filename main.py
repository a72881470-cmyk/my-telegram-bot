import requests
import time
import logging
from datetime import datetime, timedelta

# === CONFIG ===
BOT_TOKEN = "–¢–û–ö–ï–ù_–¢–ï–õ–ï–ì–†–ê–ú_–ë–û–¢–ê"
CHAT_ID = "ID_–¢–í–û–ï–ì–û_–ß–ê–¢–ê"

FETCH_INTERVAL = 60  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
BOOST_CHECK_MINUTES = 10
BOOST_PERCENT = 20  # —Ä–æ—Å—Ç –Ω–∞ 20% –∑–∞ 10 –º–∏–Ω—É—Ç
STATUS_INTERVAL = 3600  # 1 —á–∞—Å

# === –õ–æ–≥–≥–µ—Ä ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ü–µ–Ω (–¥–ª—è –±—É—Å—Ç–∞) ===
price_history = {}
last_status_time = datetime.utcnow()

# === Telegram ===
def send_tg(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    try:
        requests.post(url, data={"chat_id": CHAT_ID, "text": text, "parse_mode": "HTML"})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# === DexScreener ===
def fetch_from_dexscreener():
    url = "https://api.dexscreener.com/latest/dex/search?q=solana"
    pairs = []
    try:
        r = requests.get(url, timeout=10)
        data = r.json()
        if "pairs" in data and data["pairs"]:
            for p in data["pairs"]:
                dex_id = (p.get("dexId") or "").lower()
                price = safe_float(p.get("priceUsd"))
                change15m = safe_float(p.get("priceChange", {}).get("m15"))

                token = {
                    "name": p.get("baseToken", {}).get("name"),
                    "symbol": p.get("baseToken", {}).get("symbol"),
                    "address": p.get("baseToken", {}).get("address"),
                    "dex": dex_id,
                    "price": price,
                    "change15m": change15m,
                    "url": p.get("url"),
                    "phantom": f"https://phantom.app/ul/browse/{p.get('baseToken', {}).get('address')}"
                }
                pairs.append(token)
    except Exception as e:
        logging.error(f"DexScreener fetch error: {e}")
    return pairs

def safe_float(val):
    try:
        return float(val)
    except:
        return None

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Å—Ç–∞ ===
def check_boost(token):
    addr = token["address"]
    now = datetime.utcnow()
    price = token["price"]

    if not price:
        return None

    if addr in price_history:
        old_price, ts = price_history[addr]
        if now - ts >= timedelta(minutes=BOOST_CHECK_MINUTES):
            change = ((price - old_price) / old_price) * 100 if old_price > 0 else 0
            if change >= BOOST_PERCENT:
                return f"üöÄ <b>–û–ë–ù–ê–†–£–ñ–ï–ù –ë–£–°–¢ –ú–û–ù–ï–¢–ê!</b>\n" \
                       f"<b>{token['symbol']}</b> ({token['address']})\n" \
                       f"DEX: {token['dex']}\n" \
                       f"–¶–µ–Ω–∞: ${price:.6f} (+{change:.2f}% –∑–∞ {BOOST_CHECK_MINUTES} –º–∏–Ω)\n" \
                       f"<a href='{token['url']}'>DexScreener</a>\n" \
                       f"<a href='{token['phantom']}'>Phantom</a>"
            else:
                price_history[addr] = (price, now)
    else:
        price_history[addr] = (price, now)

    return None

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
def main():
    global last_status_time
    send_tg("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã")

    while True:
        tokens = fetch_from_dexscreener()

        # —Ä–∞–∑ –≤ —á–∞—Å - —Å–∏–≥–Ω–∞–ª "–±–æ—Ç –Ω–∞ —Å–≤—è–∑–∏"
        now = datetime.utcnow()
        if (now - last_status_time).total_seconds() >= STATUS_INTERVAL:
            send_tg("‚è∞ –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏")
            last_status_time = now

        if tokens:
            for t in tokens[:5]:
                msg = f"üÜï <b>–ù–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞</b>\n" \
                      f"<b>{t['symbol']}</b> ({t['address']})\n" \
                      f"DEX: {t['dex']}\n" \
                      f"–¶–µ–Ω–∞: ${t['price']:.6f}\n" \
                      f"Œî15m: {t['change15m']}%\n" \
                      f"<a href='{t['url']}'>DexScreener</a>\n" \
                      f"<a href='{t['phantom']}'>Phantom</a>"
                send_tg(msg)

                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É—Å—Ç
                boost_msg = check_boost(t)
                if boost_msg:
                    send_tg(boost_msg)

        time.sleep(FETCH_INTERVAL)


if __name__ == "__main__":
    main()
