import os
import time
import requests
import logging
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone

# --------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ .env –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------
load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# --------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# --------------------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_IDS = [c.strip() for c in os.getenv("TELEGRAM_CHAT_ID", "").split(",") if c.strip()]

if not TELEGRAM_BOT_TOKEN:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env ‚Äî –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!")
if not TELEGRAM_CHAT_IDS:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_CHAT_ID –≤ .env ‚Äî –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!")

# –§–∏–ª—å—Ç—Ä—ã
MIN_LIQ_USD = float(os.getenv("MIN_LIQ_USD", 5000))
MIN_VOL_5M = float(os.getenv("MIN_VOL_5M", 3000))
MIN_BUYS_5M = int(os.getenv("MIN_BUYS_5M", 20))
MIN_PCHANGE_5M = float(os.getenv("MIN_PCHANGE_5M", 5))
QUOTE_PREF = [x.strip().upper() for x in os.getenv("QUOTE_PREF", "USDC,SOL").split(",")]
NEW_MAX_AGE_MIN = int(os.getenv("NEW_MAX_AGE_MIN", 10))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã
POLL_SECONDS = int(os.getenv("POLL_SECONDS", 60))
HEARTBEAT_HOURS = float(os.getenv("HEARTBEAT_HOURS", 2))
SELL_DROP_PCT = float(os.getenv("SELL_DROP_PCT", 7))
TRACK_TTL_ = int(os.getenv("TRACK_TTL_HOURS", 24)) * 3600  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# --------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
# --------------------------
def send_telegram_message(text: str):
    for chat_id in TELEGRAM_CHAT_IDS:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
        try:
            resp = requests.post(url, json=payload, timeout=10)
            if resp.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ Telegram API: {resp.text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")

# --------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
# --------------------------
def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")

    last_heartbeat = datetime.now(timezone.utc)

    while True:
        try:
            # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî —Ç—É—Ç –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç
            now = datetime.now(timezone.utc)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –∫–∞–∂–¥—ã–µ HEARTBEAT_HOURS
            if (now - last_heartbeat) > timedelta(hours=HEARTBEAT_HOURS):
                send_telegram_message("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø–æ–∫–∞ –≤—Å—ë —Ç–∏—Ö–æ.")
                last_heartbeat = now

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä—ã–Ω–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
            # send_telegram_message("üíé –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: ...")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

        time.sleep(POLL_SECONDS)


if __name__ == "__main__":
    main()
