import os
import time
import requests
import logging
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone

# --------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ .env –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------
load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# --------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# --------------------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_IDS = [c.strip() for c in os.getenv("TELEGRAM_CHAT_ID", "").split(",") if c.strip()]

if not TELEGRAM_BOT_TOKEN:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env ‚Äî –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!")
if not TELEGRAM_CHAT_IDS:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_CHAT_ID –≤ .env ‚Äî –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!")

# –§–∏–ª—å—Ç—Ä—ã/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
MIN_LIQ_USD        = float(os.getenv("MIN_LIQ_USD", 5000))
MIN_VOL_5M         = float(os.getenv("MIN_VOL_5M", 3000))
MIN_BUYS_5M        = int(os.getenv("MIN_BUYS_5M", 20))
MIN_PCHANGE_5M     = float(os.getenv("MIN_PCHANGE_5M", 5))
QUOTE_PREF         = [x.strip().upper() for x in os.getenv("QUOTE_PREF", "USDC,SOL").split(",")]
NEW_MAX_AGE_MIN    = int(os.getenv("NEW_MAX_AGE_MIN", 10))
POLL_SECONDS       = int(os.getenv("POLL_SECONDS", 60))
HEARTBEAT_HOURS    = float(os.getenv("HEARTBEAT_HOURS", 2))
SELL_DROP_PCT      = float(os.getenv("SELL_DROP_PCT", 7))
TRACK_TTL_         = int(os.getenv("TRACK_TTL", 60))  # TTL –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)

# --------------------------
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
# --------------------------
def send_telegram_message(text: str):
    for chat_id in TELEGRAM_CHAT_IDS:
        try:
            resp = requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json={"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
            )
            if resp.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {resp.text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

# --------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# --------------------------
if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")

    tracked_tokens = {}  # —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è —Å TTL

    while True:
        now = datetime.now(timezone.utc)

        # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        tracked_tokens = {
            token: ts for token, ts in tracked_tokens.items()
            if (now - ts).total_seconds() < TRACK_TTL_
        }

        # –¢—É—Ç —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ POLL_SECONDS
        send_telegram_message(f"‚è± –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—Ä–µ–º—è: {now.strftime('%H:%M:%S')}")

        time.sleep(POLL_SECONDS)
