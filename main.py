import os
import time
import requests
import threading
from dotenv import load_dotenv
from flask import Flask

# === –ó–∞–≥—Ä—É–∂–∞–µ–º .env ===
load_dotenv()

# === –°–∏—Å—Ç–µ–º–Ω—ã–µ ===
PORT          = int(os.getenv("PORT", 8080))
PING_INTERVAL = int(os.getenv("PING_INTERVAL", 10))   # –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞
PING_TIMEOUT  = int(os.getenv("PING_TIMEOUT", 12))

# === Telegram ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

def send_telegram(text: str):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        print(f"[ERROR] Telegram error: {e}")

# === DexScreener API ===
def fetch_new_tokens():
    try:
        url = "https://api.dexscreener.com/latest/dex/search?q=solana"
        r = requests.get(url, timeout=PING_TIMEOUT)
        data = r.json()
        if "pairs" not in data:
            return []
        return data["pairs"]
    except Exception as e:
        print(f"[ERROR] DexScreener fetch error: {e}")
        return []

# === Flask healthcheck server ===
app = Flask(__name__)

@app.route("/")
def health():
    return "‚úÖ Bot is running", 200

def run_server():
    app.run(host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_server, daemon=True).start()

    send_telegram("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å –ª–æ–≤–∏—Ç –í–°–ï –º–æ–Ω–µ—Ç—ã Solana!")
    last_status_time = time.time()

    while True:
        pairs = fetch_new_tokens()

        if pairs:
            for p in pairs:
                try:
                    symbol = p.get("baseToken", {}).get("symbol", "N/A")
                    age_min = p.get("ageMinutes", "?")
                    liquidity_usd = p.get("liquidity", {}).get("usd", 0)
                    fdv = p.get("fdv", 0)
                    price_change5m = p.get("priceChange", {}).get("m5", 0)
                    txns5m = p.get("txns", {}).get("m5", {}).get("buys", 0) + p.get("txns", {}).get("m5", {}).get("sells", 0)

                    url_dex = p.get("url", "")
                    contract_address = p.get("baseToken", {}).get("address", "")
                    url_phantom = f"https://phantom.com/tokens/solana/{contract_address}"

                    msg = (
                        f"üéØ <b>{symbol}</b>\n"
                        f"‚è± –í–æ–∑—Ä–∞—Å—Ç: {age_min} –º–∏–Ω\n"
                        f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity_usd}\n"
                        f"üìä FDV: ${fdv}\n"
                        f"üìà –ò–∑–º. —Ü–µ–Ω—ã (5–º): {price_change5m}%\n"
                        f"üõí –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (5–º): {txns5m}\n"
                        f"üîó <a href='{url_dex}'>DexScreener</a> | <a href='{url_phantom}'>Phantom</a>"
                    )

                    send_telegram(msg)
                except Exception as e:
                    print(f"[ERROR] Format send error: {e}")

        else:
            print("‚è≥ –ü–æ–∫–∞ —á–∏—Å—Ç–æ, –∂–¥—É –¥–∞–ª—å—à–µ...")  

        # —Ä–∞–∑ –≤ 15 –º–∏–Ω—É—Ç –±–æ—Ç —à–ª–µ—Ç "—è –∂–∏–≤"
        if time.time() - last_status_time > 900:
            send_telegram("‚è± –Ø –Ω–∞ —Å–≤—è–∑–∏, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ Solana...")
            last_status_time = time.time()

        time.sleep(PING_INTERVAL)
