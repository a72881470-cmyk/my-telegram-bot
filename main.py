import os
import time
import threading
import telebot
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

bot = telebot.TeleBot(BOT_TOKEN)

# --- –ê–Ω—Ç–∏-—Å–ø–∞–º ---
last_alert_time = 0
ALERT_COOLDOWN = 30  # –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

# --- –°–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ ---
sent_tokens = set()


def send_alert(text: str, token_name: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –∏ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É).
    """
    global last_alert_time

    if token_name in sent_tokens:
        print(f"‚ö† {token_name} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏, –ø—Ä–æ–ø—É—Å–∫...")
        return

    now = time.time()
    if now - last_alert_time >= ALERT_COOLDOWN:
        bot.send_message(CHAT_ID, text, disable_web_page_preview=False)
        last_alert_time = now
        sent_tokens.add(token_name)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω: {token_name}")
    else:
        print("‚è≥ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–∞–Ω—Ç–∏-—Å–ø–∞–º)")


def worker_status():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ø —Ä–∞–±–æ—Ç–∞—é" –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    """
    while True:
        bot.send_message(CHAT_ID, "‚úÖ –Ø —Ä–∞–±–æ—Ç–∞—é, —Å–ª–µ–∂—É –∑–∞ —Ä—ã–Ω–∫–æ–º! üí∞")
        time.sleep(7200)  # 2 —á–∞—Å–∞


def fetch_new_tokens():
    """
    –ë–µ—Ä–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä—ã —Å DexScreener API (Solana)
    """
    url = "https://api.dexscreener.com/latest/dex/tokens/solana"
    try:
        resp = requests.get(url, timeout=10)
        data = resp.json()

        if "pairs" not in data:
            return []

        return data["pairs"][:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    except Exception as e:
        print("–û—à–∏–±–∫–∞ API:", e)
        return []


def main():
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    bot.send_message(CHAT_ID, "üöÄ –ü–æ–≥–Ω–∞–ª–∏ —Ñ–∞—Ä–º–∏—Ç—å üí∞")

    # –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π "–Ø —Ä–∞–±–æ—Ç–∞—é"
    threading.Thread(target=worker_status, daemon=True).start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        pairs = fetch_new_tokens()

        for p in pairs:
            token_name = p.get("baseToken", {}).get("name", "Unknown")
            growth = p.get("priceChange", {}).get("h1", 0)  # —Ä–æ—Å—Ç –∑–∞ 1 —á–∞—Å %
            price = p.get("priceUsd", "?")
            pair = f"{p.get('baseToken', {}).get('symbol', '')}/{p.get('quoteToken', {}).get('symbol', '')}"
            dex_link = p.get("url", "https://dexscreener.com/")
            phantom_link = f"https://phantom.app/ul/browse/{dex_link}"

            send_alert(
                f"üü¢ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω!\n\n"
                f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {token_name}\n"
                f"üìà –†–æ—Å—Ç (1—á): {growth}%\n"
                f"üí≤ –¶–µ–Ω–∞: {price}\n"
                f"üîÑ –ü–∞—Ä–∞: {pair}\n"
                f"üåê DexScreener: {dex_link}\n"
                f"üëõ Phantom: {phantom_link}",
                token_name
            )

        time.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É


if __name__ == "__main__":
    main()
