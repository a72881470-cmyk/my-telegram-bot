import requests
import telebot
import time
from datetime import datetime, timedelta

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"
CHAT_ID = "–¢–í–û–ô_CHAT_ID"
API_KEY = "sadasd234234234234"  # —Ç–≤–æ–π –∫–ª—é—á —Å Birdeye

bot = telebot.TeleBot(TELEGRAM_TOKEN)
sent_tokens = set()  # —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã


# üì° –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã Solana
def fetch_new_tokens():
    url = "https://public-api.birdeye.so/defi/tokenlist?offset=0&limit=200"
    headers = {
        "accept": "application/json",
        "x-chain": "solana",
        "X-API-KEY": API_KEY
    }
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        if resp.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {resp.status_code}, –æ—Ç–≤–µ—Ç: {resp.text}")
            return []

        data = resp.json()
        tokens = data.get("data", {}).get("tokens", [])

        new_tokens = []
        now = datetime.utcnow()
        max_age = timedelta(days=2)

        for token in tokens:
            created_at = token.get("created_at")
            if not created_at:
                continue

            try:
                created_at = datetime.utcfromtimestamp(int(created_at))
            except Exception:
                continue

            # ‚ö° –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if now - created_at <= max_age:
                vol = float(token.get("volume_usd", 0) or 0)
                liq = float(token.get("liquidity_usd", 0) or 0)

                # ‚ö° –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä—ë–º—É –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                if vol > 5000 and liq > 10000:
                    token["created_at_dt"] = created_at
                    new_tokens.append(token)

        # ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        new_tokens.sort(key=lambda x: int(x.get("created_at", 0)), reverse=True)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_tokens)} —Å–≤–µ–∂–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        return new_tokens[:5]

    except Exception as e:
        print("–û—à–∏–±–∫–∞ API:", e)
        return []


# üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ Telegram
def send_token_alert(token):
    try:
        name = token.get("name", "N/A")
        symbol = token.get("symbol", "N/A")
        address = token.get("address", "N/A")

        price = token.get("price", "N/A")
        try:
            price = round(float(price), 6)
        except Exception:
            price = "N/A"

        volume = token.get("volume_usd", "N/A")
        try:
            volume = round(float(volume), 2)
        except Exception:
            volume = "N/A"

        liquidity = token.get("liquidity_usd", "N/A")
        try:
            liquidity = round(float(liquidity), 2)
        except Exception:
            liquidity = "N/A"

        created_at = token.get("created_at_dt")
        created_str = created_at.strftime("%Y-%m-%d %H:%M:%S UTC") if created_at else "N/A"

        message = (
            f"üü¢ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω!\n\n"
            f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üîπ –°–∏–º–≤–æ–ª: {symbol}\n"
            f"üí≤ –¶–µ–Ω–∞: {price}\n"
            f"üìä –û–±—ä—ë–º 24—á: {volume}$\n"
            f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {liquidity}$\n"
            f"‚è∞ –°–æ–∑–¥–∞–Ω: {created_str}\n"
            f"üåê DexScreener: https://dexscreener.com/solana/{address}\n"
            f"üëõ Phantom: https://phantom.app/ul/browse/{address}"
        )

        bot.send_message(CHAT_ID, message)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {name} ({symbol})")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e)


# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ª–æ–≤–ª—é –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã Solana...")
    while True:
        tokens = fetch_new_tokens()
        for token in tokens:
            address = token.get("address")
            if not address:
                continue
            if address in sent_tokens:
                print(f"‚ö† {token.get('symbol', '???')} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏, –ø—Ä–æ–ø—É—Å–∫...")
                continue
            send_token_alert(token)
            sent_tokens.add(address)
        time.sleep(60)


if __name__ == "__main__":
    main()
