import os
import time
import requests
import telebot
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥–∏
API_KEY = os.getenv("API_KEY")  # —Ç–≤–æ–π API –¥–ª—è Solana
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
CHAT_ID = os.getenv("CHAT_ID")  # —Ç–≤–æ–π chat_id –≤ Telegram

bot = telebot.TeleBot(BOT_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤
tracked_tokens = {}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(text: str):
    try:
        bot.send_message(CHAT_ID, text, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
def get_new_tokens():
    url = "https://api.dexscreener.com/latest/dex/tokens"
    headers = {"Authorization": API_KEY}
    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        print(f"–û—à–∏–±–∫–∞ API: {response.status_code}, {response.text}")
        return []

    tokens = response.json().get("pairs", [])
    fresh_tokens = []
    now = datetime.utcnow()

    for token in tokens:
        created_at = datetime.utcfromtimestamp(token["pairCreatedAt"] / 1000)
        if now - created_at < timedelta(hours=3):  # –Ω–µ —Å—Ç–∞—Ä—à–µ 3 —á–∞—Å–æ–≤
            fresh_tokens.append(token)
    return fresh_tokens

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞ —Ç–æ–∫–µ–Ω–∞
def check_growth(token):
    address = token["baseToken"]["address"]
    price_change = token.get("priceChange", {}).get("h1", 0)

    if address not in tracked_tokens:
        tracked_tokens[address] = {
            "symbol": token["baseToken"]["symbol"],
            "price": token["priceUsd"],
            "price_change": price_change
        }
        return

    if price_change >= 30:
        msg = (
            f"üöÄ <b>–†–æ—Å—Ç —Ç–æ–∫–µ–Ω–∞!</b>\n\n"
            f"üíé –¢–æ–∫–µ–Ω: <b>{token['baseToken']['symbol']}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: ${token['priceUsd']}\n"
            f"üìà –†–æ—Å—Ç: {price_change}%\n\n"
            f"üîó DexScreener: https://dexscreener.com/solana/{address}\n"
            f"üëõ Phantom: https://phantom.app/asset/{address}"
        )
        send_message(msg)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def run_bot():
    last_alive = time.time()

    send_message("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ª–æ–≤–ª—é –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã Solana...")

    while True:
        try:
            tokens = get_new_tokens()
            for token in tokens:
                address = token["baseToken"]["address"]
                if address not in tracked_tokens:
                    msg = (
                        f"ü™ô <b>–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω!</b>\n\n"
                        f"üíé –¢–æ–∫–µ–Ω: <b>{token['baseToken']['symbol']}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞: ${token['priceUsd']}\n"
                        f"‚è∞ –°–æ–∑–¥–∞–Ω: {datetime.utcfromtimestamp(token['pairCreatedAt']/1000)}\n\n"
                        f"üîó DexScreener: https://dexscreener.com/solana/{address}\n"
                        f"üëõ Phantom: https://phantom.app/asset/{address}"
                    )
                    send_message(msg)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Ç
                check_growth(token)

            # –°–æ–æ–±—â–µ–Ω–∏–µ "–∂–∏–≤" –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
            if time.time() - last_alive > 7200:
                send_message("ü§ñ –ë–æ—Ç –∂–∏–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                last_alive = time.time()

            time.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(10)


if __name__ == "__main__":
    run_bot()
