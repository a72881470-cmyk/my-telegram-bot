import requests
import telebot
import time
import json
from datetime import datetime, timedelta

# üîë –¢–≤–æ–π —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
TELEGRAM_TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"
CHAT_ID = "–¢–í–û–ô_CHAT_ID"

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –•—Ä–∞–Ω–∏–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
sent_tokens = set()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å DexScreener
def fetch_new_tokens():
    url = "https://api.dexscreener.com/latest/dex/chains/solana"
    try:
        resp = requests.get(url, timeout=10)

        if resp.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {resp.status_code}")
            return []

        data = resp.json()

        if not data or "pairs" not in data:
            print("‚ö† API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—è 'pairs'")
            return []

        pairs = data["pairs"]
        print(f"üîç –í—Å–µ–≥–æ –ø–∞—Ä –Ω–∞ Solana: {len(pairs)}")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        for p in pairs[:3]:
            print("üëâ", p.get("baseToken", {}).get("symbol"), "-", p.get("baseToken", {}).get("name"))

        # --- –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –æ–±—ä–µ–º—É ---
        new_pairs = []
        now = datetime.utcnow()
        max_age = timedelta(days=2)

        for pair in pairs:
            created_ts = pair.get("pairCreatedAt")
            if created_ts:
                created_at = datetime.utcfromtimestamp(created_ts / 1000)
                if now - created_at <= max_age:
                    volume = pair.get("volume", {}).get("h24", 0)
                    if volume and volume > 5000:  # —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É
                        new_pairs.append(pair)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_pairs)} –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–º–ª–∞–¥—à–µ 2 –¥–Ω–µ–π –∏ volume > 5k$)")
        return new_pairs[:5]

    except Exception as e:
        print("–û—à–∏–±–∫–∞ API:", e)
        return []

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
def send_token_alert(token):
    try:
        name = token.get("baseToken", {}).get("name", "N/A")
        symbol = token.get("baseToken", {}).get("symbol", "N/A")
        price = token.get("priceUsd", "N/A")
        url = token.get("url", "https://dexscreener.com/")
        volume = token.get("volume", {}).get("h24", "N/A")

        message = (
            f"üü¢ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω!\n\n"
            f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üîπ –°–∏–º–≤–æ–ª: {symbol}\n"
            f"üí≤ –¶–µ–Ω–∞: {price}\n"
            f"üìä –û–±—ä–µ–º 24—á: {volume}$\n"
            f"üåê DexScreener: {url}\n"
            f"üëõ Phantom: https://phantom.app/"
        )

        bot.send_message(CHAT_ID, message)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {name} ({symbol})")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, —Å–ª–µ–∂—É –∑–∞ Solana...")
    while True:
        tokens = fetch_new_tokens()
        for token in tokens:
            address = token.get("pairAddress")
            if not address:
                continue

            if address in sent_tokens:
                print(f"‚ö† {token.get('baseToken', {}).get('symbol', '???')} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏, –ø—Ä–æ–ø—É—Å–∫...")
                continue

            send_token_alert(token)
            sent_tokens.add(address)

        time.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    main()
