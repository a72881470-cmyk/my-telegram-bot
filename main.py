import requests
import time
import logging
import json
from datetime import datetime, timedelta
import telegram

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_KEY = "9aad437cea2b440e8ebf437a60a3d02e"
BOT_TOKEN = "–¢–í–û–ô_TELEGRAM_BOT_TOKEN"
CHAT_ID = "–¢–í–û–ô_CHAT_ID"

# Telegram –±–æ—Ç
bot = telegram.Bot(token=BOT_TOKEN)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
SEEN_TOKENS_FILE = "seen_tokens.json"
try:
    with open(SEEN_TOKENS_FILE, "r") as f:
        seen_tokens = set(json.load(f))
except:
    seen_tokens = set()

def save_seen_tokens():
    with open(SEEN_TOKENS_FILE, "w") as f:
        json.dump(list(seen_tokens), f)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
def check_api_key():
    url = "https://public-api.birdeye.so/defi/tokenlist?offset=0&limit=1"
    headers = {"accept": "application/json", "x-chain": "solana", "X-API-KEY": API_KEY}
    r = requests.get(url, headers=headers)
    return r.status_code == 200

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
def fetch_tokens():
    url = "https://public-api.birdeye.so/defi/tokenlist?offset=0&limit=20"
    headers = {"accept": "application/json", "x-chain": "solana", "X-API-KEY": API_KEY}
    r = requests.get(url, headers=headers)
    if r.status_code == 200:
        return r.json().get("data", {}).get("tokens", [])
    return []

# –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –æ —Ç–æ–∫–µ–Ω–µ
def fetch_token_info(address):
    url = f"https://public-api.birdeye.so/defi/price?address={address}"
    headers = {"accept": "application/json", "x-chain": "solana", "X-API-KEY": API_KEY}
    r = requests.get(url, headers=headers)
    if r.status_code == 200:
        return r.json().get("data", {})
    return {}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
def run_bot():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ª–æ–≤–ª—é –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã Solana...")
    last_alive = time.time()

    while True:
        try:
            tokens = fetch_tokens()
            now = datetime.utcnow()

            for token in tokens:
                address = token.get("address")
                created_at = datetime.utcfromtimestamp(token.get("created_at", now.timestamp()) / 1000)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ —Å—Ç–∞—Ä—à–µ 3 —á–∞—Å–æ–≤
                if now - created_at > timedelta(hours=3):
                    continue

                # –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                if address not in seen_tokens:
                    seen_tokens.add(address)
                    save_seen_tokens()

                    info = fetch_token_info(address)
                    price = info.get("value", "N/A")
                    change_24h = info.get("priceChange24hPercent", 0)

                    msg = (
                        f"üÜï –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω Solana!\n\n"
                        f"ü™ô {token.get('symbol')} ({address})\n"
                        f"üíµ –¶–µ–Ω–∞: {price}\n"
                        f"üìà –†–æ—Å—Ç 24—á: {change_24h:.2f}%\n\n"
                        f"üîç [–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥](https://birdeye.so/token/{address}?chain=solana)\n"
                        f"üëõ [Phantom Wallet](https://phantom.app/ul/browse/{address})"
                    )
                    bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown")

                # –ï—Å–ª–∏ —Ä–æ—Å—Ç > 30%
                info = fetch_token_info(address)
                change_24h = info.get("priceChange24hPercent", 0)
                if change_24h > 30:
                    msg = (
                        f"üö® –†–æ—Å—Ç —Ç–æ–∫–µ–Ω–∞!\n\n"
                        f"ü™ô {token.get('symbol')} ({address})\n"
                        f"üìà –†–æ—Å—Ç: {change_24h:.2f}%\n\n"
                        f"üîç [–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥](https://birdeye.so/token/{address}?chain=solana)\n"
                        f"üëõ [Phantom Wallet](https://phantom.app/ul/browse/{address})"
                    )
                    bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown")

            # –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –±–æ—Ç –∂–∏–≤
            if time.time() - last_alive >= 7200:
                bot.send_message(chat_id=CHAT_ID, text="ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã!")
                last_alive = time.time()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")

        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É


if __name__ == "__main__":
    if check_api_key():
        run_bot()
    else:
        logging.error("‚ùå API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
