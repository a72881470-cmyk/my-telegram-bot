import requests
import time
import logging
from datetime import datetime, timedelta, timezone

# ======================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ======================
TG_TOKEN = "–¢–û–ö–ï–ù_–¢–ï–õ–ï–ì–†–ê–ú"
TG_CHAT_ID = "ID_–¢–ï–õ–ï–ì–†–ê–ú"

STATUS_INTERVAL = 3600       # –∫–∞–∂–¥—ã–µ 1 —á–∞—Å –±–æ—Ç –ø–∏—à–µ—Ç "–Ω–∞ —Å–≤—è–∑–∏"
BOOST_CHECK_MINUTES = 5      # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞ –º–æ–Ω–µ—Ç—ã
BOOST_PERCENT = 5            # üöÄ —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ —Ä–æ—Å—Ç >5% –∑–∞ 5 –º–∏–Ω—É—Ç

# –§–∏–ª—å—Ç—Ä—ã –∏–∑ —Ç–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞
NEW_MAX_AGE_MIN = 180        # –Ω–µ —Å—Ç–∞—Ä—à–µ 3 —á–∞—Å–æ–≤
MIN_LIQ_USD = 10000          # –º–∏–Ω–∏–º—É–º $10k –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
MAX_LIQ_USD = 5000000        # –º–∞–∫—Å–∏–º—É–º $5m –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
MAX_FDV_USD = 50000000       # FDV –¥–æ $50m
MIN_TXNS_5M = 10             # –º–∏–Ω–∏–º—É–º 10 —Å–¥–µ–ª–æ–∫ –∑–∞ 5 –º–∏–Ω—É—Ç
MIN_BUYS_RATIO_5M = 0.45     # –º–∏–Ω–∏–º—É–º 45% –ø–æ–∫—É–ø–æ–∫
MIN_PCHANGE_5M_BUY = 1       # –º–∏–Ω–∏–º—É–º —Ä–æ—Å—Ç 1% –∑–∞ 5 –º–∏–Ω—É—Ç

# ======================
# üóÇ –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
# ======================
price_history = {}
last_status_time = datetime.now(timezone.utc)

# DEX'—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
DEX_LIST = [
    "pumpswap", "raydium", "orca", "meteora",
    "pumpfun", "meteora-dbc", "fluxbeam"
]

# ======================
# üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ======================
def send_tg(msg: str):
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    try:
        requests.post(url, data={
            "chat_id": TG_CHAT_ID,
            "text": msg,
            "parse_mode": "HTML"
        }, timeout=10)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# ======================
# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–Ω–µ—Ç —Å DexScreener
# ======================
def fetch_from_dexscreener():
    tokens = []
    for dex in DEX_LIST:
        try:
            url = f"https://api.dexscreener.com/latest/dex/search/?q={dex}"
            r = requests.get(url, timeout=10)

            if r.status_code == 404:
                logging.warning(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {dex} (404)")
                continue
            if r.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {dex}: {r.status_code}")
                continue

            data = r.json()
            for pair in data.get("pairs", []):
                try:
                    token = {
                        "symbol": pair.get("baseToken", {}).get("symbol", "N/A"),
                        "address": pair.get("baseToken", {}).get("address", "N/A"),
                        "price": float(pair.get("priceUsd", 0) or 0),
                        "dex": pair.get("dexId", dex),
                        "url": f"https://dexscreener.com/solana/{pair.get('pairAddress', '')}",
                        "phantom": f"https://phantom.app/ul/browse/{pair.get('pairAddress', '')}",
                        "liquidity": pair.get("liquidity", {}).get("usd", 0),
                        "fdv": pair.get("fdv", 0),
                        "txns5m": pair.get("txns", {}).get("m5", {}).get("buys", 0)
                                + pair.get("txns", {}).get("m5", {}).get("sells", 0),
                        "buys_ratio": (
                            pair.get("txns", {}).get("m5", {}).get("buys", 0) /
                            max(1, pair.get("txns", {}).get("m5", {}).get("buys", 0)
                                + pair.get("txns", {}).get("m5", {}).get("sells", 0))
                        ),
                        "age_min": (datetime.now(timezone.utc) -
                                    datetime.fromisoformat(pair.get("pairCreatedAt", datetime.now().isoformat())
                                                           .replace("Z", "+00:00"))).total_seconds() / 60
                    }

                    # —Ñ–∏–ª—å—Ç—Ä—ã
                    if not (MIN_LIQ_USD <= token["liquidity"] <= MAX_LIQ_USD):
                        continue
                    if token["fdv"] > MAX_FDV_USD:
                        continue
                    if token["txns5m"] < MIN_TXNS_5M:
                        continue
                    if token["buys_ratio"] < MIN_BUYS_RATIO_5M:
                        continue
                    if token["age_min"] > NEW_MAX_AGE_MIN:
                        continue

                    tokens.append(token)

                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {dex}: {e}")

        except Exception as e:
            logging.error(f"DexScreener fetch error {dex}: {e}")
    return tokens

# ======================
# üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É—Å—Ç –º–æ–Ω–µ—Ç—ã
# ======================
def check_boost(token):
    addr = token["address"]
    now = datetime.now(timezone.utc)
    price = token["price"]

    if not price or price <= 0:
        return None

    if addr in price_history:
        old_price, ts = price_history[addr]
        if now - ts >= timedelta(minutes=BOOST_CHECK_MINUTES):
            change = ((price - old_price) / old_price) * 100 if old_price > 0 else 0
            if change >= BOOST_PERCENT:
                return (
                    f"üöÄ <b>–°–ò–ì–ù–ê–õ: –ë–£–°–¢ –ú–û–ù–ï–¢–´!</b>\n"
                    f"<b>{token['symbol']}</b> ({token['address']})\n"
                    f"DEX: {token['dex']}\n"
                    f"–¶–µ–Ω–∞: ${price:.6f} (+{change:.2f}% –∑–∞ {BOOST_CHECK_MINUTES} –º–∏–Ω)\n"
                    f"<a href='{token['url']}'>DexScreener</a>\n"
                    f"<a href='{token['phantom']}'>Phantom</a>"
                )
            else:
                price_history[addr] = (price, now)
    else:
        price_history[addr] = (price, now)

    return None

# ======================
# üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# ======================
def main():
    global last_status_time
    send_tg("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—ã —Å–æ –≤—Å–µ—Ö DEX'–æ–≤")

    while True:
        tokens = fetch_from_dexscreener()

        now = datetime.now(timezone.utc)
        if (now - last_status_time).total_seconds() >= STATUS_INTERVAL:
            send_tg("‚è∞ –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏")
            last_status_time = now

        for token in tokens:
            boost_msg = check_boost(token)
            if boost_msg:
                send_tg(boost_msg)

        time.sleep(30)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
    logging.info("Starting Container")
    main()
