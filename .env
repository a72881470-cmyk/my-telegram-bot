import os
import requests
from datetime import datetime, timezone
from urllib.parse import quote

from dotenv import load_dotenv
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID   = os.getenv("CHAT_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env (—Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏)
CHECK_INTERVAL       = int(os.getenv("CHECK_INTERVAL", 60))
NEW_MAX_AGE_MIN      = int(os.getenv("NEW_MAX_AGE_MIN", 180))
MIN_LIQ_USD          = float(os.getenv("MIN_LIQ_USD", 10000))
MAX_LIQ_USD          = float(os.getenv("MAX_LIQ_USD", 5000000))
MIN_PCHANGE_5M_ALERT = float(os.getenv("MIN_PCHANGE_5M_ALERT", 5))
BIG_PUMP_ALERT       = float(os.getenv("BIG_PUMP_ALERT", 100))
BIG_DUMP_ALERT       = float(os.getenv("BIG_DUMP_ALERT", 100))

DEX_SEARCH = "https://api.dexscreener.com/latest/dex/search?q=solana"

bot = Bot(token=BOT_TOKEN)

# —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è % –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∏ –ø—Ä–æ—Å–∞–¥–∫–∏ –æ—Ç –ø–∏–∫–∞
tracked = {}  # mint -> {"first": price, "high": price, "pair_url": str, "pair_name": str, "symbol": str}

def phantom_link(mint: str) -> str:
    """Deeplink –Ω–∞ Phantom Swap: SOL -> mint (–º–æ–±. Phantom; –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–∞–π—Ç)"""
    buy  = quote(f"solana:101/address:{mint}", safe="")
    sell = quote("solana:101/address:So11111111111111111111111111111111111111112", safe="")  # SOL
    return f"https://phantom.app/ul/v1/swap?buy={buy}&sell={sell}"

def jupiter_link(mint: str) -> str:
    return f"https://jup.ag/swap/SOL-{mint}"

def nice_price(x: float) -> str:
    return f"{x:.8f}".rstrip("0").rstrip(".")

def send_with_buttons(text: str, mint: str, dexscreener_url: str):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üü£ –ö—É–ø–∏—Ç—å –≤ Phantom", url=phantom_link(mint))],
        [InlineKeyboardButton("üåê Dexscreener", url=dexscreener_url)],
        [InlineKeyboardButton("üß≠ Jupiter (–≤–µ–±)", url=jupiter_link(mint))]
    ])
    bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)

def start(update, context):
    update.message.reply_text("‚úÖ –ë–æ—Ç Solana –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã!")

def keep_alive(context):
    bot.send_message(chat_id=CHAT_ID, text="ü§ñ –Ø —Ä–∞–±–æ—Ç–∞—é, –º–æ–Ω–∏—Ç–æ—Ä—é —Ä—ã–Ω–æ–∫...")

def check_new_tokens(context):
    try:
        r = requests.get(DEX_SEARCH, timeout=15)
        if r.status_code != 200:
            return
        data = r.json()
        pairs = data.get("pairs", [])
        now = datetime.now(timezone.utc)

        for p in pairs:
            # –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            base   = p.get("baseToken", {}) or {}
            quoteT = p.get("quoteToken", {}) or {}
            symbol = base.get("symbol", "?")
            mint   = base.get("address", "")
            pair_url = p.get("url", "")
            dex_id = p.get("dexId", "")
            pair_name = f"{base.get('symbol','?')}/{quoteT.get('symbol','?')} ¬∑ {dex_id}"

            if not mint:  # –±–µ–∑ mint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º
                continue

            # –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—ã
            created_at = p.get("pairCreatedAt")
            if not created_at:
                continue
            age_min = (now - datetime.fromtimestamp(created_at/1000, tz=timezone.utc)).total_seconds()/60
            if age_min > NEW_MAX_AGE_MIN:
                continue

            # –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            liq = float((p.get("liquidity") or {}).get("usd") or 0)
            if liq < MIN_LIQ_USD or liq > MAX_LIQ_USD:
                continue

            # —Ü–µ–Ω—ã/–∏–∑–º–µ–Ω–µ–Ω–∏—è
            price = float(p.get("priceUsd") or 0) or float(p.get("priceNative") or 0)
            if price <= 0:
                continue
            pchange5 = float((p.get("priceChange") or {}).get("m5") or 0)

            # –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–ø–µ—Ä–≤—ã–µ –≤–∏–¥–∏–º ‚Äî —à–ª—ë–º —Å–∏–≥–Ω–∞–ª —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É
            if mint not in tracked and abs(pchange5) >= MIN_PCHANGE_5M_ALERT:
                tracked[mint] = {"first": price, "high": price, "pair_url": pair_url, "pair_name": pair_name, "symbol": symbol}
                text = (
                    f"<b>üÜï –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω (Solana)</b>\n"
                    f"üéØ <b>{symbol}</b>\n"
                    f"üíµ –¶–µ–Ω–∞: <code>{nice_price(price)}</code>\n"
                    f"üìà –†–æ—Å—Ç (5–º): <b>{pchange5:.1f}%</b>\n"
                    f"‚öñÔ∏è –ü–∞—Ä–∞: <code>{pair_name}</code>\n"
                    f"üí¨ –ü–æ–≥–Ω–∞–ª–∏ —Ñ–∞—Ä–º–∏—Ç—å –¥–µ–Ω—å–≥–∏! üí∏"
                )
                send_with_buttons(text, mint, pair_url)
                continue  # –∫ –∞–ª–µ—Ä—Ç–∞–º –≤–µ—Ä–Ω—ë–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ

            # —Å–ª–µ–∂–µ–Ω–∏–µ: –∞–ø–¥–µ–π—Ç —Ö–∞–π/—Ä–æ—Å—Ç –æ—Ç —Å—Ç–∞—Ä—Ç–∞/–ø—Ä–æ—Å–∞–¥–∫–∞
            if mint in tracked:
                t = tracked[mint]
                if price > t["high"]:
                    t["high"] = price

                # —Ä–æ—Å—Ç –æ—Ç —Å—Ç–∞—Ä—Ç–∞
                grow_from_start = (price / t["first"] - 1) * 100 if t["first"] > 0 else 0
                if grow_from_start >= BIG_PUMP_ALERT and not t.get("pumped"):
                    t["pumped"] = True
                    text = (
                        f"<b>üöÄ –†–æ—Å—Ç +{grow_from_start:.1f}% –æ—Ç —Å—Ç–∞—Ä—Ç–∞</b>\n"
                        f"üéØ <b>{symbol}</b>\n"
                        f"üíµ –¶–µ–Ω–∞: <code>{nice_price(price)}</code>\n"
                        f"‚öñÔ∏è <code>{t['pair_name']}</code>"
                    )
                    send_with_buttons(text, mint, t["pair_url"])

                # –ø–∞–¥–µ–Ω–∏–µ –æ—Ç —Ö–∞—è
                if t["high"] > 0:
                    drop_from_high = (1 - price / t["high"]) * 100
                    if drop_from_high >= BIG_DUMP_ALERT and not t.get("dumped"):
                        t["dumped"] = True
                        text = (
                            f"<b>üîª –ü–∞–¥–µ–Ω–∏–µ ‚àí{drop_from_high:.1f}% –æ—Ç —Ö–∞—è</b>\n"
                            f"üéØ <b>{symbol}</b>\n"
                            f"üíµ –¶–µ–Ω–∞: <code>{nice_price(price)}</code>\n"
                            f"‚öñÔ∏è <code>{t['pair_name']}</code>"
                        )
                        send_with_buttons(text, mint, t["pair_url"])

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", e)

def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))

    jq = updater.job_queue
    jq.run_repeating(check_new_tokens, interval=CHECK_INTERVAL, first=5)
    jq.run_repeating(keep_alive,      interval=7200,          first=30)  # –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞

    print("‚úÖ –ë–æ—Ç Solana –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
